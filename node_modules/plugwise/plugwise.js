/* global Homey */
"use strict";
  
function Plugwise() 
{
	
}

module.exports = Plugwise;
var request = require('request');


Plugwise.prototype.find = function(device_type, callback) {
	this.discover(device_type, function(result){
		return callback(result);
	});
};

Plugwise.prototype.findDevices = function(device, callback) {
	var url = 'http://' + device.name + ':' + device.password + '@' + device.ip + '/core/appliances'; //Try to connect to the device
	console.log("Device URL:", url);
	request({ url: url, method: 'GET'}, function (error, response, body){
		if (error) return callback(error, null)

		if (response == "undefined") {
			return callback("device_not_available", null)
		} else if (response.statusCode == "401") {
			return callback("auth_problem", null);
		} else {
		
			var XML = require('pixl-xml');
		    var doc = XML.parse(body);
			
			var devices = [];
			
			if(doc.appliance instanceof Array){
				doc = doc.appliance;
			} else if (doc.appliance instanceof Object){
				doc = [doc.appliance];
			}
			
		 	doc.forEach(function(element) {
				 var date = new Date();
				 date.setTime(date.getTime());
				 
				 var updated_time = new Date(element.modified_date);
				 
				 if(element.type == 'thermostat'){
					 devices.push({'id': element.id, 'name': element.name});
				 } else if (element.type == 'zz_misc' && date.getTime() - updated_time.getTime() < (60 * 1000)){
					 devices.push({'id': element.id, 'name': element.name});
				 }
			 }, this);
			 
			 return callback(null, devices);
		}
	});
};

Plugwise.prototype.getDevices = function(devices, device_type, callback) {	
	this.discover(device_type, function(result){
		
		if(result.length == 0)
			return callback(false);
		
		for (var index = 0; index < devices.length; index++) {			
			devices[index].ip = result.filter(function(x) { 				
				return x.host === devices[index].id
			})[0].addresses[0];
		}
		return callback(devices);
	});
};

Plugwise.prototype.discover = function(device_type, callback){	
	Homey.app.getDevices(device_type, function(result){		
		return callback(result);
	});
};